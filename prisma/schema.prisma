// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication and ownership
model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String         @default("user") // user, admin
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  leads         Lead[]
  organizations Organization[]
  contacts      Contact[]
  deals         Deal[]
  activities    Activity[]
  labels        Label[]
  partners      Partner[]

  @@map("users")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// CRM Models

model Lead {
  id        String   @id @default(cuid())
  googleId  String?  @unique

  // Informações Básicas da Empresa
  businessName            String
  registeredName          String?
  foundationDate          DateTime?
  companyRegistrationID   String?

  // Localização
  address   String?
  city      String?
  state     String?
  country   String?
  zipCode   String?
  vicinity  String?

  // Contato da Empresa (geral)
  phone     String?
  whatsapp  String?
  website   String?
  email     String?

  // Redes Sociais
  instagram String?
  linkedin  String?
  facebook  String?
  twitter   String?
  tiktok    String?

  // Informações do Google Places
  categories          String?
  rating              Float?
  priceLevel          Int?
  userRatingsTotal    Int?
  permanentlyClosed   Boolean  @default(false)
  types               String?

  // Informações da Empresa
  companyOwner    String?
  companySize     String?
  revenue         Float?
  employeesCount  Int?
  description     String?
  equityCapital   Float?
  businessStatus  String?

  // Atividades
  primaryActivity     String?
  secondaryActivities String?

  // Metadados da Busca
  source        String?
  quality       String?  // cold, warm, hot
  searchTerm    String?
  fieldsFilled  Int?
  category      String?
  radius        Int?

  // Status e Conversão
  status        String   @default("new") // new, contacted, qualified, disqualified
  convertedAt   DateTime?
  convertedToOrganizationId  String?  @unique // Lead vira 1 Organization

  // Label
  labelId String?

  // Referral tracking
  referredByPartnerId String?

  // Owner e timestamps
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner                 User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  label                 Label?        @relation(fields: [labelId], references: [id], onDelete: SetNull)
  leadContacts          LeadContact[] // Lead tem múltiplos contatos
  contacts              Contact[]     // Contatos diretamente vinculados ao Lead
  activities            Activity[]    // Lead tem múltiplas atividades
  convertedOrganization Organization? @relation("LeadConversion", fields: [convertedToOrganizationId], references: [id])
  referredByPartner     Partner?      @relation("PartnerReferrals", fields: [referredByPartnerId], references: [id], onDelete: SetNull)

  @@index([ownerId])
  @@index([status])
  @@index([quality])
  @@index([convertedAt])
  @@index([labelId])
  @@index([referredByPartnerId])
  @@map("leads")
}

model LeadContact {
  id       String  @id @default(cuid())
  leadId   String

  // Informações do Contato
  name     String
  role     String?  // Cargo: Gerente, Diretor, etc
  email    String?
  phone    String?
  whatsapp String?
  isPrimary Boolean @default(false) // Contato principal

  // Conversão
  convertedToContactId String?  @unique // LeadContact vira 1 Contact

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lead             Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  convertedContact Contact? @relation("LeadContactConversion", fields: [convertedToContactId], references: [id])

  @@index([leadId])
  @@index([isPrimary])
  @@map("lead_contacts")
}

model Organization {
  id           String   @id @default(cuid())
  name         String   // Nome Fantasia (obrigatório)
  legalName    String?  // Razão Social
  foundationDate DateTime?

  // Contact Info
  website   String?
  phone     String?
  whatsapp  String?
  email     String?

  // Location
  country        String?
  state          String?
  city           String?
  zipCode        String?
  streetAddress  String?

  // Business Info
  industry       String?
  employeeCount  Int?
  annualRevenue  Float?
  taxId          String?  // CNPJ, Tax ID, etc
  description    String?
  companyOwner   String?
  companySize    String?

  // Social Media
  instagram String?
  linkedin  String?
  facebook  String?
  twitter   String?
  tiktok    String?

  // Lead tracking
  sourceLeadId String?

  // Label
  labelId String?

  // External Projects (JSON array of project IDs from external API)
  externalProjectIds String? // JSON string: ["projectId1", "projectId2"]

  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner      User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  label      Label?    @relation(fields: [labelId], references: [id], onDelete: SetNull)
  contacts   Contact[]
  deals      Deal[]
  sourceLead Lead?     @relation("LeadConversion") // Organization veio de qual Lead

  @@index([ownerId])
  @@index([sourceLeadId])
  @@index([labelId])
  @@map("organizations")
}

model Label {
  id        String   @id @default(cuid())
  name      String
  color     String   // Hex color code (e.g., #FF5733)
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  leads         Lead[]
  organizations Organization[]

  @@unique([name, ownerId]) // Each user can't have duplicate label names
  @@index([ownerId])
  @@map("labels")
}

model Contact {
  id             String        @id @default(cuid())
  name           String
  email          String?
  phone          String?
  whatsapp       String?
  role           String?       // Cargo da pessoa
  department     String?       // Departamento: Vendas, TI, Financeiro, etc

  // Company linking - can be linked to Lead, Organization, or Partner
  leadId         String?       // Linked to a Lead (before conversion)
  organizationId String?       // Linked to an Organization (after conversion or direct)
  partnerId      String?       // Linked to a Partner company

  // Professional Info
  linkedin       String?

  // Contact Status & Priority
  status         String        @default("active") // active, inactive, bounced
  isPrimary      Boolean       @default(false)    // Contato principal da organização/lead

  // Additional Info
  birthDate          DateTime?
  notes              String?
  preferredLanguage  String?   @default("pt-BR")
  source             String?   // referral, website, event, cold_call, etc

  // Lead tracking - veio de qual LeadContact
  sourceLeadContactId String?

  ownerId        String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  owner            User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  lead             Lead?         @relation(fields: [leadId], references: [id], onDelete: SetNull)
  organization     Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  partner          Partner?      @relation(fields: [partnerId], references: [id], onDelete: SetNull)
  deals            Deal[]
  activities       Activity[]
  sourceLeadContact LeadContact? @relation("LeadContactConversion") // Contact veio de qual LeadContact

  @@index([ownerId])
  @@index([leadId])
  @@index([organizationId])
  @@index([partnerId])
  @@index([sourceLeadContactId])
  @@index([status])
  @@index([isPrimary])
  @@map("contacts")
}

model Pipeline {
  id        String   @id @default(cuid())
  name      String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stages Stage[]

  @@map("pipelines")
}

model Stage {
  id          String   @id @default(cuid())
  name        String
  order       Int
  pipelineId  String
  probability Int      @default(0) // 0-100
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  pipeline Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  deals    Deal[]

  @@index([pipelineId])
  @@map("stages")
}

model Deal {
  id                String        @id @default(cuid())
  title             String
  value             Float         @default(0)
  currency          String        @default("BRL")
  status            String        @default("open") // open, won, lost
  stageId           String
  contactId         String?
  organizationId    String?

  ownerId           String
  expectedCloseDate DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  stage        Stage         @relation(fields: [stageId], references: [id], onDelete: Restrict)
  contact      Contact?      @relation(fields: [contactId], references: [id], onDelete: SetNull)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  activities   Activity[]

  @@index([ownerId])
  @@index([stageId])
  @@index([contactId])
  @@index([organizationId])
  @@map("deals")
}

model Activity {
  id          String    @id @default(cuid())
  type        String    // call, meeting, email, task, whatsapp, physical_visit, instagram_dm
  subject     String
  description String?
  dueDate     DateTime?
  completed   Boolean   @default(false)
  dealId      String?
  contactId   String?   // Primary contact (for backwards compatibility)
  contactIds  String?   // JSON array of contact IDs for multiple contacts
  leadId      String?   // Activities can be linked to Leads
  partnerId   String?   // Activities can be linked to Partners
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  owner   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  deal    Deal?    @relation(fields: [dealId], references: [id], onDelete: Cascade)
  contact Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  lead    Lead?    @relation(fields: [leadId], references: [id], onDelete: Cascade)
  partner Partner? @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([dealId])
  @@index([contactId])
  @@index([leadId])
  @@index([partnerId])
  @@index([dueDate])
  @@map("activities")
}

model Partner {
  id        String   @id @default(cuid())

  // Informações da Empresa Parceira
  name             String  // Nome da empresa parceira
  legalName        String? // Razão Social
  foundationDate   DateTime?

  // Tipo de parceria
  partnerType  String  // consultoria, universidade, fornecedor, indicador, investidor, etc

  // Contato da Empresa (geral)
  website   String?
  email     String?
  phone     String?
  whatsapp  String?

  // Localização
  country        String?
  state          String?
  city           String?
  zipCode        String?
  streetAddress  String?

  // Redes Sociais
  linkedin  String?
  instagram String?
  facebook  String?
  twitter   String?

  // Informações da Parceria
  industry       String? // Setor de atuação
  employeeCount  Int?
  companySize    String? // Porte da empresa
  description    String?
  expertise      String? // Área de expertise/especialização
  notes          String?

  lastContactDate DateTime? // Última vez que houve contato

  ownerId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  owner         User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  contacts      Contact[]  // Contatos da empresa parceira
  activities    Activity[]
  referredLeads Lead[]     @relation("PartnerReferrals")

  @@index([ownerId])
  @@index([partnerType])
  @@map("partners")
}
