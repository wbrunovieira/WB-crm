// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication and ownership
model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String         @default("user") // user, admin
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  leads         Lead[]
  organizations Organization[]
  contacts      Contact[]
  deals         Deal[]
  activities    Activity[]
  labels        Label[]
  partners      Partner[]

  @@map("users")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// CRM Models

model Lead {
  id        String   @id @default(cuid())
  googleId  String?  @unique

  // Informações Básicas da Empresa
  businessName            String
  registeredName          String?
  foundationDate          DateTime?
  companyRegistrationID   String?

  // Localização
  address   String?
  city      String?
  state     String?
  country   String?
  zipCode   String?
  vicinity  String?

  // Contato da Empresa (geral)
  phone     String?
  whatsapp  String?
  website   String?
  email     String?

  // Redes Sociais
  instagram String?
  linkedin  String?
  facebook  String?
  twitter   String?
  tiktok    String?

  // Informações do Google Places
  categories          String?
  rating              Float?
  priceLevel          Int?
  userRatingsTotal    Int?
  permanentlyClosed   Boolean  @default(false)
  types               String?

  // Informações da Empresa
  companyOwner    String?
  companySize     String?
  revenue         Float?
  employeesCount  Int?
  description     String?
  equityCapital   Float?
  businessStatus  String?

  // Atividades (deprecated - usar CNAEs)
  primaryActivity     String?
  secondaryActivities String?

  // Atividades CNAE (empresas brasileiras)
  primaryCNAEId       String? // CNAE primário

  // Atividade para empresas internacionais (texto livre)
  internationalActivity String?

  // Metadados da Busca
  source        String?
  quality       String?  // cold, warm, hot
  searchTerm    String?
  fieldsFilled  Int?
  category      String?
  radius        Int?

  // Status e Conversão
  status        String   @default("new") // new, contacted, qualified, disqualified
  convertedAt   DateTime?
  convertedToOrganizationId  String?  @unique // Lead vira 1 Organization

  // Label
  labelId String?

  // Referral tracking
  referredByPartnerId String?

  // Owner e timestamps
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner                 User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  label                 Label?        @relation(fields: [labelId], references: [id], onDelete: SetNull)
  leadContacts          LeadContact[] // Lead tem múltiplos contatos
  contacts              Contact[]     // Contatos diretamente vinculados ao Lead
  activities            Activity[]    // Lead tem múltiplas atividades
  convertedOrganization Organization? @relation("LeadConversion", fields: [convertedToOrganizationId], references: [id])
  referredByPartner     Partner?      @relation("PartnerReferrals", fields: [referredByPartnerId], references: [id], onDelete: SetNull)
  leadProducts          LeadProduct[] // Produtos de interesse do Lead

  // Tech Profile (current tech stack)
  leadLanguages   LeadLanguage[]
  leadFrameworks  LeadFramework[]
  leadHosting     LeadHosting[]
  leadDatabases   LeadDatabase[]
  leadERPs        LeadERP[]
  leadCRMs        LeadCRM[]
  leadEcommerces  LeadEcommerce[]

  // CNAEs
  primaryCNAE         CNAE?                @relation("LeadPrimaryCNAE", fields: [primaryCNAEId], references: [id], onDelete: SetNull)
  secondaryCNAEs      LeadSecondaryCNAE[] // Múltiplas atividades secundárias

  @@index([ownerId])
  @@index([status])
  @@index([quality])
  @@index([convertedAt])
  @@index([labelId])
  @@index([referredByPartnerId])
  @@index([primaryCNAEId])
  @@map("leads")
}

model LeadContact {
  id       String  @id @default(cuid())
  leadId   String

  // Informações do Contato
  name     String
  role     String?  // Cargo: Gerente, Diretor, etc
  email    String?
  phone    String?
  whatsapp String?
  isPrimary Boolean @default(false) // Contato principal

  // Conversão
  convertedToContactId String?  @unique // LeadContact vira 1 Contact

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lead             Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  convertedContact Contact? @relation("LeadContactConversion", fields: [convertedToContactId], references: [id])

  @@index([leadId])
  @@index([isPrimary])
  @@map("lead_contacts")
}

model Organization {
  id           String   @id @default(cuid())
  name         String   // Nome Fantasia (obrigatório)
  legalName    String?  // Razão Social
  foundationDate DateTime?

  // Contact Info
  website   String?
  phone     String?
  whatsapp  String?
  email     String?

  // Location
  country        String?
  state          String?
  city           String?
  zipCode        String?
  streetAddress  String?

  // Business Info
  industry       String?
  employeeCount  Int?
  annualRevenue  Float?
  taxId          String?  // CNPJ, Tax ID, etc
  description    String?
  companyOwner   String?
  companySize    String?

  // Atividades CNAE (empresas brasileiras)
  primaryCNAEId       String? // CNAE primário

  // Atividade para empresas internacionais (texto livre)
  internationalActivity String?

  // Social Media
  instagram String?
  linkedin  String?
  facebook  String?
  twitter   String?
  tiktok    String?

  // Lead tracking
  sourceLeadId String?

  // Label
  labelId String?

  // External Projects (JSON array of project IDs from external API)
  externalProjectIds String? // JSON string: ["projectId1", "projectId2"]

  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner                User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  label                Label?                 @relation(fields: [labelId], references: [id], onDelete: SetNull)
  contacts             Contact[]
  deals                Deal[]
  sourceLead           Lead?                  @relation("LeadConversion") // Organization veio de qual Lead
  organizationProducts OrganizationProduct[]  // Produtos da Organization

  // Tech Profile (current tech stack)
  organizationLanguages   OrganizationLanguage[]
  organizationFrameworks  OrganizationFramework[]
  organizationHosting     OrganizationHosting[]
  organizationDatabases   OrganizationDatabase[]
  organizationERPs        OrganizationERP[]
  organizationCRMs        OrganizationCRM[]
  organizationEcommerces  OrganizationEcommerce[]

  // CNAEs
  primaryCNAE                CNAE?                        @relation("OrganizationPrimaryCNAE", fields: [primaryCNAEId], references: [id], onDelete: SetNull)
  secondaryCNAEs             OrganizationSecondaryCNAE[] // Múltiplas atividades secundárias

  @@index([ownerId])
  @@index([sourceLeadId])
  @@index([labelId])
  @@index([primaryCNAEId])
  @@map("organizations")
}

model Label {
  id        String   @id @default(cuid())
  name      String
  color     String   // Hex color code (e.g., #FF5733)
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  leads         Lead[]
  organizations Organization[]

  @@unique([name, ownerId]) // Each user can't have duplicate label names
  @@index([ownerId])
  @@map("labels")
}

model Contact {
  id             String        @id @default(cuid())
  name           String
  email          String?
  phone          String?
  whatsapp       String?
  role           String?       // Cargo da pessoa
  department     String?       // Departamento: Vendas, TI, Financeiro, etc

  // Company linking - can be linked to Lead, Organization, or Partner
  leadId         String?       // Linked to a Lead (before conversion)
  organizationId String?       // Linked to an Organization (after conversion or direct)
  partnerId      String?       // Linked to a Partner company

  // Professional Info
  linkedin       String?

  // Contact Status & Priority
  status         String        @default("active") // active, inactive, bounced
  isPrimary      Boolean       @default(false)    // Contato principal da organização/lead

  // Additional Info
  birthDate          DateTime?
  notes              String?
  preferredLanguage  String?   @default("pt-BR")
  source             String?   // referral, website, event, cold_call, etc

  // Lead tracking - veio de qual LeadContact
  sourceLeadContactId String?

  ownerId        String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  owner            User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  lead             Lead?         @relation(fields: [leadId], references: [id], onDelete: SetNull)
  organization     Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  partner          Partner?      @relation(fields: [partnerId], references: [id], onDelete: SetNull)
  deals            Deal[]
  activities       Activity[]
  sourceLeadContact LeadContact? @relation("LeadContactConversion") // Contact veio de qual LeadContact

  @@index([ownerId])
  @@index([leadId])
  @@index([organizationId])
  @@index([partnerId])
  @@index([sourceLeadContactId])
  @@index([status])
  @@index([isPrimary])
  @@map("contacts")
}

model Pipeline {
  id        String   @id @default(cuid())
  name      String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stages Stage[]

  @@map("pipelines")
}

model Stage {
  id          String   @id @default(cuid())
  name        String
  order       Int
  pipelineId  String
  probability Int      @default(0) // 0-100
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  pipeline Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  deals    Deal[]

  @@index([pipelineId])
  @@map("stages")
}

model Deal {
  id                String        @id @default(cuid())
  title             String
  value             Float         @default(0)
  currency          String        @default("BRL")
  status            String        @default("open") // open, won, lost
  stageId           String
  contactId         String?
  organizationId    String?

  ownerId           String
  expectedCloseDate DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  stage        Stage         @relation(fields: [stageId], references: [id], onDelete: Restrict)
  contact      Contact?      @relation(fields: [contactId], references: [id], onDelete: SetNull)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  activities   Activity[]
  dealProducts DealProduct[] // Produtos do Deal
  dealTechStacks DealTechStack[] // Categorias técnicas (Frontend, Backend, etc)
  dealLanguages  DealLanguage[]  // Linguagens de programação
  dealFrameworks DealFramework[] // Frameworks utilizados

  @@index([ownerId])
  @@index([stageId])
  @@index([contactId])
  @@index([organizationId])
  @@map("deals")
}

model Activity {
  id          String    @id @default(cuid())
  type        String    // call, meeting, email, task, whatsapp, physical_visit, instagram_dm
  subject     String
  description String?
  dueDate     DateTime?
  completed   Boolean   @default(false)
  dealId      String?
  contactId   String?   // Primary contact (for backwards compatibility)
  contactIds  String?   // JSON array of contact IDs for multiple contacts
  leadId      String?   // Activities can be linked to Leads
  partnerId   String?   // Activities can be linked to Partners
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  owner   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  deal    Deal?    @relation(fields: [dealId], references: [id], onDelete: Cascade)
  contact Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  lead    Lead?    @relation(fields: [leadId], references: [id], onDelete: Cascade)
  partner Partner? @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([dealId])
  @@index([contactId])
  @@index([leadId])
  @@index([partnerId])
  @@index([dueDate])
  @@map("activities")
}

model Partner {
  id        String   @id @default(cuid())

  // Informações da Empresa Parceira
  name             String  // Nome da empresa parceira
  legalName        String? // Razão Social
  foundationDate   DateTime?

  // Tipo de parceria
  partnerType  String  // consultoria, universidade, fornecedor, indicador, investidor, etc

  // Contato da Empresa (geral)
  website   String?
  email     String?
  phone     String?
  whatsapp  String?

  // Localização
  country        String?
  state          String?
  city           String?
  zipCode        String?
  streetAddress  String?

  // Redes Sociais
  linkedin  String?
  instagram String?
  facebook  String?
  twitter   String?

  // Informações da Parceria
  industry       String? // Setor de atuação
  employeeCount  Int?
  companySize    String? // Porte da empresa
  description    String?
  expertise      String? // Área de expertise/especialização
  notes          String?

  lastContactDate DateTime? // Última vez que houve contato

  ownerId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  owner           User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  contacts        Contact[]        // Contatos da empresa parceira
  activities      Activity[]
  referredLeads   Lead[]           @relation("PartnerReferrals")
  partnerProducts PartnerProduct[] // Produtos/serviços do parceiro

  @@index([ownerId])
  @@index([partnerType])
  @@map("partners")
}

// ============ BUSINESS LINES & PRODUCTS ============

model BusinessLine {
  id          String   @id @default(cuid())
  name        String   // "Desenvolvimento Web", "Automação", "IA"
  slug        String   @unique // "dev-web", "automation", "ai"
  description String?
  color       String?  // Hex color for UI (#792990)
  icon        String?  // Lucide icon name
  isActive    Boolean  @default(true)
  order       Int      @default(0) // Display order

  // Relations
  products    Product[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@map("business_lines")
}

model Product {
  id              String   @id @default(cuid())
  name            String   // "E-commerce", "Chatbot WhatsApp"
  slug            String   @unique // "ecommerce", "chatbot-whatsapp"
  description     String?
  businessLineId  String

  // Pricing Info (reference only)
  basePrice       Float?   // Base reference price
  currency        String   @default("BRL")
  pricingType     String?  // "fixed", "hourly", "monthly", "custom"

  isActive        Boolean  @default(true)
  order           Int      @default(0)

  // Relations
  businessLine    BusinessLine @relation(fields: [businessLineId], references: [id], onDelete: Cascade)

  leadProducts         LeadProduct[]
  organizationProducts OrganizationProduct[]
  dealProducts         DealProduct[]
  partnerProducts      PartnerProduct[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([businessLineId])
  @@index([isActive])
  @@map("products")
}

// ============ MANY-TO-MANY RELATIONS ============

model LeadProduct {
  id             String   @id @default(cuid())
  leadId         String
  productId      String

  // Interest context
  interestLevel  String?  // "high", "medium", "low"
  estimatedValue Float?   // Estimated deal value for this product
  notes          String?  // Specific notes about interest

  // Relations
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([leadId, productId])
  @@index([leadId])
  @@index([productId])
  @@index([interestLevel])
  @@map("lead_products")
}

model OrganizationProduct {
  id              String   @id @default(cuid())
  organizationId  String
  productId       String

  // Purchase history
  status          String   @default("interested") // interested, purchased, declined
  firstPurchaseAt DateTime?
  lastPurchaseAt  DateTime?
  totalPurchases  Int      @default(0)
  totalRevenue    Float    @default(0)

  notes           String?

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  product      Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([organizationId, productId])
  @@index([organizationId])
  @@index([productId])
  @@index([status])
  @@map("organization_products")
}

model DealProduct {
  id          String   @id @default(cuid())
  dealId      String
  productId   String

  // Product details in this deal
  quantity    Int      @default(1)
  unitPrice   Float    // Negotiated price
  discount    Float    @default(0) // Discount in currency
  totalValue  Float    // (quantity * unitPrice) - discount

  // Additional info
  description String?  // Customizations, specifications
  deliveryTime Int?    // Estimated delivery in days

  // Relations
  deal      Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([dealId, productId])
  @@index([dealId])
  @@index([productId])
  @@map("deal_products")
}

model PartnerProduct {
  id             String   @id @default(cuid())
  partnerId      String
  productId      String

  // Partner expertise
  expertiseLevel String?  // "basic", "intermediate", "expert"
  canRefer       Boolean  @default(true)  // Can refer clients for this product?
  canDeliver     Boolean  @default(false) // Can deliver this product?

  // Commission (if applicable)
  commissionType  String?  // "percentage", "fixed"
  commissionValue Float?   // Percentage or fixed value

  notes          String?

  // Relations
  partner   Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([partnerId, productId])
  @@index([partnerId])
  @@index([productId])
  @@index([canRefer])
  @@map("partner_products")
}

// ============ TECH STACK ============

model TechCategory {
  id          String   @id @default(cuid())
  name        String   // "Frontend", "Backend", "Fullstack", "DevOps", "Data Science", "Mobile"
  slug        String   @unique // "frontend", "backend", "fullstack"
  description String?
  color       String?  // Hex color for UI
  icon        String?  // Lucide icon name
  order       Int      @default(0)
  isActive    Boolean  @default(true)

  // Relations
  dealTechStacks DealTechStack[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@map("tech_categories")
}

model TechLanguage {
  id          String   @id @default(cuid())
  name        String   // "JavaScript", "Python", "PHP", "Java", "Go", "Ruby"
  slug        String   @unique // "javascript", "python"
  color       String?  // Hex color for badges
  icon        String?  // URL or icon name for logo
  isActive    Boolean  @default(true)

  // Relations
  dealLanguages DealLanguage[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@map("tech_languages")
}

model TechFramework {
  id           String   @id @default(cuid())
  name         String   // "React", "Next.js", "Django", "Laravel", "Vue.js"
  slug         String   @unique // "react", "nextjs", "django"
  languageSlug String?  // Optional relation to language (e.g., "javascript", "python")
  color        String?  // Hex color for badges
  icon         String?  // URL or icon name for logo
  isActive     Boolean  @default(true)

  // Relations
  dealFrameworks DealFramework[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([languageSlug])
  @@map("tech_frameworks")
}

// ============ DEAL TECH STACK JUNCTIONS ============

model DealTechStack {
  id             String   @id @default(cuid())
  dealId         String
  techCategoryId String

  // Relations
  deal         Deal         @relation(fields: [dealId], references: [id], onDelete: Cascade)
  techCategory TechCategory @relation(fields: [techCategoryId], references: [id], onDelete: Cascade)

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([dealId, techCategoryId])
  @@index([dealId])
  @@index([techCategoryId])
  @@map("deal_tech_stacks")
}

model DealLanguage {
  id         String   @id @default(cuid())
  dealId     String
  languageId String
  isPrimary  Boolean  @default(false) // Main language of the project

  // Relations
  deal     Deal         @relation(fields: [dealId], references: [id], onDelete: Cascade)
  language TechLanguage @relation(fields: [languageId], references: [id], onDelete: Cascade)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([dealId, languageId])
  @@index([dealId])
  @@index([languageId])
  @@index([isPrimary])
  @@map("deal_languages")
}

model DealFramework {
  id          String   @id @default(cuid())
  dealId      String
  frameworkId String

  // Relations
  deal      Deal          @relation(fields: [dealId], references: [id], onDelete: Cascade)
  framework TechFramework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([dealId, frameworkId])
  @@index([dealId])
  @@index([frameworkId])
  @@map("deal_frameworks")
}

// ============ TECH PROFILE (Current Tech Stack of Leads/Organizations) ============

// Profile options (what technologies are available to track)
model TechProfileLanguage {
  id       String   @id @default(cuid())
  name     String   // "JavaScript", "Python", "PHP", "Java"
  slug     String   @unique
  color    String?
  icon     String?
  isActive Boolean  @default(true)
  order    Int      @default(0)

  // Relations
  leadLanguages         LeadLanguage[]
  organizationLanguages OrganizationLanguage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@map("tech_profile_languages")
}

model TechProfileFramework {
  id       String   @id @default(cuid())
  name     String   // "React", "Django", "Laravel"
  slug     String   @unique
  color    String?
  icon     String?
  isActive Boolean  @default(true)
  order    Int      @default(0)

  // Relations
  leadFrameworks         LeadFramework[]
  organizationFrameworks OrganizationFramework[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@map("tech_profile_frameworks")
}

model TechProfileHosting {
  id       String   @id @default(cuid())
  name     String   // "AWS", "Azure", "GCP", "DigitalOcean", "Vercel"
  slug     String   @unique
  type     String   // "cloud", "vps", "shared", "dedicated", "serverless"
  color    String?
  icon     String?
  isActive Boolean  @default(true)
  order    Int      @default(0)

  // Relations
  leadHosting         LeadHosting[]
  organizationHosting OrganizationHosting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([type])
  @@map("tech_profile_hosting")
}

model TechProfileDatabase {
  id       String   @id @default(cuid())
  name     String   // "PostgreSQL", "MySQL", "MongoDB", "Redis"
  slug     String   @unique
  type     String   // "relational", "nosql", "cache", "search"
  color    String?
  icon     String?
  isActive Boolean  @default(true)
  order    Int      @default(0)

  // Relations
  leadDatabases         LeadDatabase[]
  organizationDatabases OrganizationDatabase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([type])
  @@map("tech_profile_databases")
}

model TechProfileERP {
  id       String   @id @default(cuid())
  name     String   // "SAP", "Oracle", "Totvs", "Odoo"
  slug     String   @unique
  color    String?
  icon     String?
  isActive Boolean  @default(true)
  order    Int      @default(0)

  // Relations
  leadERPs         LeadERP[]
  organizationERPs OrganizationERP[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@map("tech_profile_erps")
}

model TechProfileCRM {
  id       String   @id @default(cuid())
  name     String   // "Salesforce", "HubSpot", "Pipedrive", "Zoho"
  slug     String   @unique
  color    String?
  icon     String?
  isActive Boolean  @default(true)
  order    Int      @default(0)

  // Relations
  leadCRMs         LeadCRM[]
  organizationCRMs OrganizationCRM[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@map("tech_profile_crms")
}

model TechProfileEcommerce {
  id       String   @id @default(cuid())
  name     String   // "Shopify", "WooCommerce", "Magento", "VTEX"
  slug     String   @unique
  color    String?
  icon     String?
  isActive Boolean  @default(true)
  order    Int      @default(0)

  // Relations
  leadEcommerces         LeadEcommerce[]
  organizationEcommerces OrganizationEcommerce[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@map("tech_profile_ecommerce")
}

// ============ LEAD TECH PROFILE JUNCTIONS ============

model LeadLanguage {
  id         String   @id @default(cuid())
  leadId     String
  languageId String

  // Relations
  lead     Lead                  @relation(fields: [leadId], references: [id], onDelete: Cascade)
  language TechProfileLanguage   @relation(fields: [languageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([leadId, languageId])
  @@index([leadId])
  @@index([languageId])
  @@map("lead_languages")
}

model LeadFramework {
  id          String   @id @default(cuid())
  leadId      String
  frameworkId String

  // Relations
  lead      Lead                  @relation(fields: [leadId], references: [id], onDelete: Cascade)
  framework TechProfileFramework  @relation(fields: [frameworkId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([leadId, frameworkId])
  @@index([leadId])
  @@index([frameworkId])
  @@map("lead_frameworks")
}

model LeadHosting {
  id        String   @id @default(cuid())
  leadId    String
  hostingId String

  // Relations
  lead    Lead                 @relation(fields: [leadId], references: [id], onDelete: Cascade)
  hosting TechProfileHosting   @relation(fields: [hostingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([leadId, hostingId])
  @@index([leadId])
  @@index([hostingId])
  @@map("lead_hosting")
}

model LeadDatabase {
  id         String   @id @default(cuid())
  leadId     String
  databaseId String

  // Relations
  lead     Lead                 @relation(fields: [leadId], references: [id], onDelete: Cascade)
  database TechProfileDatabase  @relation(fields: [databaseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([leadId, databaseId])
  @@index([leadId])
  @@index([databaseId])
  @@map("lead_databases")
}

model LeadERP {
  id     String   @id @default(cuid())
  leadId String
  erpId  String

  // Relations
  lead Lead            @relation(fields: [leadId], references: [id], onDelete: Cascade)
  erp  TechProfileERP  @relation(fields: [erpId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([leadId, erpId])
  @@index([leadId])
  @@index([erpId])
  @@map("lead_erps")
}

model LeadCRM {
  id     String   @id @default(cuid())
  leadId String
  crmId  String

  // Relations
  lead Lead            @relation(fields: [leadId], references: [id], onDelete: Cascade)
  crm  TechProfileCRM  @relation(fields: [crmId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([leadId, crmId])
  @@index([leadId])
  @@index([crmId])
  @@map("lead_crms")
}

model LeadEcommerce {
  id          String   @id @default(cuid())
  leadId      String
  ecommerceId String

  // Relations
  lead      Lead                   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  ecommerce TechProfileEcommerce   @relation(fields: [ecommerceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([leadId, ecommerceId])
  @@index([leadId])
  @@index([ecommerceId])
  @@map("lead_ecommerce")
}

// ============ ORGANIZATION TECH PROFILE JUNCTIONS ============

model OrganizationLanguage {
  id             String   @id @default(cuid())
  organizationId String
  languageId     String

  // Relations
  organization Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  language     TechProfileLanguage  @relation(fields: [languageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, languageId])
  @@index([organizationId])
  @@index([languageId])
  @@map("organization_languages")
}

model OrganizationFramework {
  id             String   @id @default(cuid())
  organizationId String
  frameworkId    String

  // Relations
  organization Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  framework    TechProfileFramework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, frameworkId])
  @@index([organizationId])
  @@index([frameworkId])
  @@map("organization_frameworks")
}

model OrganizationHosting {
  id             String   @id @default(cuid())
  organizationId String
  hostingId      String

  // Relations
  organization Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  hosting      TechProfileHosting  @relation(fields: [hostingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, hostingId])
  @@index([organizationId])
  @@index([hostingId])
  @@map("organization_hosting")
}

model OrganizationDatabase {
  id             String   @id @default(cuid())
  organizationId String
  databaseId     String

  // Relations
  organization Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  database     TechProfileDatabase @relation(fields: [databaseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, databaseId])
  @@index([organizationId])
  @@index([databaseId])
  @@map("organization_databases")
}

model OrganizationERP {
  id             String   @id @default(cuid())
  organizationId String
  erpId          String

  // Relations
  organization Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  erp          TechProfileERP @relation(fields: [erpId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, erpId])
  @@index([organizationId])
  @@index([erpId])
  @@map("organization_erps")
}

model OrganizationCRM {
  id             String   @id @default(cuid())
  organizationId String
  crmId          String

  // Relations
  organization Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  crm          TechProfileCRM @relation(fields: [crmId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, crmId])
  @@index([organizationId])
  @@index([crmId])
  @@map("organization_crms")
}

model OrganizationEcommerce {
  id             String   @id @default(cuid())
  organizationId String
  ecommerceId    String

  // Relations
  organization Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  ecommerce    TechProfileEcommerce  @relation(fields: [ecommerceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, ecommerceId])
  @@index([organizationId])
  @@index([ecommerceId])
  @@map("organization_ecommerce")
}

// ============ CNAE (Classificação Nacional de Atividades Econômicas) ============

model CNAE {
  id       String   @id @default(cuid())
  code     String   @unique // Código CNAE (ex: "0111-3/01")
  description String            // Descrição da atividade (ex: "Cultivo de arroz")

  // Relations
  leadsPrimary            Lead[]                     @relation("LeadPrimaryCNAE")
  leadsSecondary          LeadSecondaryCNAE[]
  organizationsPrimary    Organization[]             @relation("OrganizationPrimaryCNAE")
  organizationsSecondary  OrganizationSecondaryCNAE[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@map("cnaes")
}

// ============ LEAD CNAE JUNCTION (Secondary Activities) ============

model LeadSecondaryCNAE {
  id      String   @id @default(cuid())
  leadId  String
  cnaeId  String

  // Relations
  lead Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  cnae CNAE @relation(fields: [cnaeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([leadId, cnaeId])
  @@index([leadId])
  @@index([cnaeId])
  @@map("lead_secondary_cnaes")
}

// ============ ORGANIZATION CNAE JUNCTION (Secondary Activities) ============

model OrganizationSecondaryCNAE {
  id             String   @id @default(cuid())
  organizationId String
  cnaeId         String

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  cnae         CNAE         @relation(fields: [cnaeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, cnaeId])
  @@index([organizationId])
  @@index([cnaeId])
  @@map("organization_secondary_cnaes")
}
